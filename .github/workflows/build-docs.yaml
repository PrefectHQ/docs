name: Build and Deploy Docs

permissions:
  contents: read
  pull-requests: write

on:
  repository_dispatch:
    types:
      - update_docs
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build and deploy (e.g., "2.8.0"). Use "latest" to build and deploy directly from `main`.'
        type: string
        required: true
        default: 'latest'

jobs:
  build_and_deploy_docs:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout docs
      uses: actions/checkout@v3
      with:
        ref: main
        fetch-depth: 0
        path: ./docs
    
    - name: Set docs version
      run: |
        version="${{ github.event.client_payload.version }}"
        if [[ -z "$version" ]]; then
          version="${{ github.event.inputs.version }}"
        fi

        # if version is missing, exit with error
        if [[ -z "$version" ]]; then
          echo "Can't build versioned docs without a version!"
          exit 1
        fi

        echo "version=$version" >> $GITHUB_ENV

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.10.x

    - name: Clone PrefectHQ/prefect
      run: |
        version="${{ env.version }}"
        if [[ $version == "latest" ]]; then
          git clone --depth 1 https://github.com/PrefectHQ/prefect.git prefect_source
        else
          git clone --branch "$version" --depth 1 https://github.com/PrefectHQ/prefect.git prefect_source
        fi

      working-directory: ${{ github.workspace }}/


    - name: Clone PrefectHQ/mkdocs-material-insiders
      uses: actions/checkout@v3
      with:
        repository: PrefectHQ/mkdocs-material-insiders
        ref: main
        token: ${{ secrets.MKDOCS_REPO_RO }}
        path: ./mkdocs-material-insiders
        fetch-depth: 1


    - name: Install Prefect and dependencies
      run: |
        pip install --upgrade pip 
        pip install --upgrade --upgrade-strategy eager  -e ".[dev]"

      working-directory: ${{ github.workspace }}/prefect_source


    - name: Install mkdocs-material-insiders
      run: |
        # make sure libcairo2 is installed
        sudo apt-get install -y libcairo2
        pip install --upgrade --upgrade-strategy eager -e .

      working-directory: ${{ github.workspace }}/mkdocs-material-insiders


    - name: Install Python dependencies
      run: |
        pip install -r requirements.txt
    

    - name: Set branch name
      run: |
        version="${{ env.version }}"
        timestamp="$(date +%s)"
        echo "branch_name=update-docs-$version-$timestamp" >> $GITHUB_ENV
        echo "timestamp=$timestamp" >> $GITHUB_ENV


    - name: Update docs
      run: |
        git config user.name "GitHub Actions Bot"
        git config user.email "github-actions-bot@example.com"

        version="${{ env.version }}"
        branch_name="${{ env.branch_name }}"

        : # create the version branch, otherwise mike will create a branch
        : # that has non common history with main
        git checkout -b $branch_name
        git checkout main
        
        ln -s ../prefect_source/mkdocs.yml
        ln -s ../prefect_source/mkdocs.insiders.yml      
        ln -s ../prefect_source/src ./src
        ln -s ../prefect_source/docs ./docs

        # append the contents of ./overrides/templates/outdated.html to ./docs/overrides/main.html
        cat ./overrides/templates/outdated.html >> ./docs/overrides/main.html

        # run ./utilities/update-mkdocs-config.py to update mkdocs.yml
        python ./utilities/update-mkdocs-config.py \
          --config-file-path ./mkdocs.yml \
          --docs-version "$version"

        mike deploy --update-aliases --branch $branch_name --prefix=versions $version
        
        rm -rf site
        unlink ./src
        unlink ./docs
        unlink ./mkdocs.yml
        unlink ./mkdocs.insiders.yml

      working-directory: ${{ github.workspace }}/docs


    - name: Update Netlify TOML
      env: 
        PREFECT_SOURCE: ${{ github.workspace }}/../prefect_source
      run: |
        version="${{ env.version }}"
        # if version is not latest, skip this step
        if [[ $version != "latest" ]]; then
          exit 0
        fi

        git checkout $branch_name

        python build-netlify-config.py \
          --input-config-path "$PREFECT_SOURCE/netlify.toml" \
          --overrides-path ./netlify.overrides.toml \
          --additions-path ./netlify.additions.toml \
          --output-config-path ./netlify_temp.toml
        

        # If $GITHUB_WORKSPACE/netlify.toml is missing, 
        # or exist but differs from ./netlify_temp.toml, 
        # move ./netlify_temp.toml to $GITHUB_WORKSPACE/netlify.toml.
        # otherwise, just remove ./netlify_temp.toml

        if [[ ! -f $GITHUB_WORKSPACE/netlify.toml ]] || \
          [[ $(diff $GITHUB_WORKSPACE/netlify.toml ./netlify_temp.toml) ]]; then
          mv ./netlify_temp.toml $GITHUB_WORKSPACE/netlify.toml
          
          # commit the change
          git add $GITHUB_WORKSPACE/netlify.toml
          git commit -m "Update Netlify TOML for version $version"
        else
          rm ./netlify_temp.toml
        fi

      working-directory: ${{ github.workspace }}/docs/overrides/netlify


    - name: Create Pull Request
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        version="${{ env.version }}"
        branch_name="${{ env.branch_name }}"

        git push origin $branch_name
        gh pr create --base main --head $branch_name \
          --title "Update documentation for $version-$timestamp" \
          --body "Automated documentation update for version $version" \
          --label "documentation"
      
      working-directory: ${{ github.workspace }}/docs
